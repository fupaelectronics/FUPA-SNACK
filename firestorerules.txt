rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection: hanya user yang terautentikasi yang bisa membaca/menulis data mereka sendiri
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Presensi collection: user hanya bisa membaca data mereka sendiri, admin bisa semua
    match /presensi/{document} {
      allow read: if request.auth != null && (request.auth.uid == resource.data.uid || isAdmin(request.auth.uid));
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Cuti collection: user bisa membaca dan membuat cuti mereka sendiri, admin bisa semua
    match /cuti/{document} {
      allow read: if request.auth != null && (request.auth.uid == resource.data.uid || isAdmin(request.auth.uid));
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Notifikasi collection: user bisa membaca notifikasi mereka, admin bisa semua
    match /notifikasi/{document} {
      allow read: if request.auth != null && (
        resource.data.uid == request.auth.uid || 
        resource.data.targetRole == 'karyawan' && getUserRole(request.auth.uid) == 'karyawan' ||
        resource.data.targetRole == 'admin' && isAdmin(request.auth.uid) ||
        isAdmin(request.auth.uid)
      );
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Aturan waktu collections: admin bisa mengelola, user hanya bisa membaca
    match /aturanwaktudefault/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    match /aturanwaktuuser/{document} {
      allow read: if request.auth != null && (request.auth.uid == resource.data.uid || isAdmin(request.auth.uid));
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Pengumuman collection: admin bisa mengelola, user hanya bisa membaca pengumuman yang ditujukan kepada mereka
    match /pengumuman/{document} {
      allow read: if request.auth != null && (
        resource.data.target == 'all' || 
        resource.data.target == request.auth.uid || 
        (resource.data.target is list && request.auth.uid in resource.data.target) ||
        isAdmin(request.auth.uid)
      );
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Fungsi pembantu untuk mengecek apakah user adalah admin
    function isAdmin(uid) {
      return exists(/databases/$(database)/documents/users/$(uid)) && 
        get(/databases/$(database)/documents/users/$(uid)).data.role == 'admin';
    }
    
    // Fungsi untuk mendapatkan role user
    function getUserRole(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }
  }
}