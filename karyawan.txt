<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <title>Presensi FUPA â€” Karyawan</title>
  <meta name="theme-color" content="#FFB300" />
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="default">
  <meta name="apple-mobile-web-app-title" content="FUPA Presensi">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:FILL,GRAD@1,200" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet" />
  <style>
    :root{
      --bg1:#FFF59D; --bg2:#FFD54F; --bg3:#FFB300; --card:#ffffffcc; --txt:#222; --accent:#673AB7;
      --soft-shadow: 0 10px 30px rgba(0,0,0,.15); --good:#2e7d32; --warn:#f9a825; --bad:#c62828;
    }
    *{box-sizing:border-box; margin:0; padding:0;}
    body{
      margin:0; font-family:Inter,system-ui; color:var(--txt);
      background: radial-gradient(1200px 800px at 80% -10%, var(--bg3), transparent),
                  radial-gradient(1000px 600px at 0% 0%, var(--bg2), transparent),
                  linear-gradient(180deg, var(--bg1), var(--bg2) 60%, var(--bg3));
      min-height:100svh; overflow-x:hidden; position:relative;
    }
    header{
      position:sticky; top:0; z-index:5; display:flex; align-items:center; justify-content:space-between; gap:12px;
      padding:14px 16px; backdrop-filter: blur(8px); background: rgba(255,255,255,0.9);
    }
    .brand{display:flex; align-items:center; gap:10px}
    .icons{display:flex; align-items:center; gap:10px}
    .icon-btn{
      background:#fff; border:1px solid rgba(0,0,0,.06); border-radius:14px; padding:8px; display:inline-flex; cursor:pointer;
      box-shadow:var(--soft-shadow);
    }
    .chip{
      background:#fff; padding:8px 12px; border-radius:12px; border:1px solid rgba(0,0,0,.06);
      box-shadow:var(--soft-shadow); display:inline-flex; align-items:center; gap:8px;
    }
    .container{padding:16px}
    .grid{display:grid; grid-template-columns:1fr; gap:16px}
    @media(min-width:900px){ .grid{grid-template-columns:1.1fr .9fr} }
    .card{
      background:var(--card); border-radius:16px; padding:16px; box-shadow:var(--soft-shadow);
      backdrop-filter: blur(8px);
    }
    .btn{
      display:inline-flex; align-items:center; gap:8px; background:linear-gradient(135deg, #FFB300, #FF8F00);
      color:#fff; border:none; border-radius:12px; padding:10px 14px; font-weight:700; cursor:pointer;
      box-shadow:0 10px 20px rgba(255,143,0,.25); transition: all 0.3s ease;
    }
    .btn:hover:not(:disabled) { transform: translateY(-2px); box-shadow: 0 15px 30px rgba(255,143,0,.4); }
    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none !important;
    }
    .status{font-weight:800; padding:6px 10px; border-radius:12px; color:#fff; display:inline-flex; align-items:center; gap:6px}
    .s-good{background:var(--good)}
    .s-warn{background:var(--warn)}
    .s-bad{background:var(--bad)}
    video, canvas, img{width:100%; border-radius:12px; background:#000; max-height:300px; object-fit:cover}
    dialog{
      border:none; border-radius:16px; width:min(520px,90vw); padding:0; box-shadow:var(--soft-shadow);
      animation:pop .2s ease; overflow:hidden; background: white;
    }
    @keyframes pop{ from{transform:translateY(10px); opacity:.5} to{transform:translateY(0); opacity:1} }
    .dlg-head{display:flex; align-items:center; justify-content:space-between; padding:12px 14px; background:#fff; border-bottom: 1px solid #eee;}
    .dlg-body{padding:14px; background:#fff}
    .row{display:flex; gap:10px; align-items:center; flex-wrap:wrap}
    .input{display:flex; align-items:center; gap:8px; background:#fff; border:1px solid rgba(0,0,0,.06); border-radius:12px; padding:8px 10px}
    .input input, .input select{border:none; outline:none; background:transparent; font-size:14px; width:100%}
    .toast{ 
      position:fixed; left:50%; bottom:18px; transform:translateX(-50%); 
      color:#fff; padding:12px 16px; border-radius:12px; 
      box-shadow:var(--soft-shadow); z-index:1000; display:none; 
      font-weight: 600;
    }
    .camera-placeholder {
      width: 100%;
      height: 300px;
      background: #1a1a1a;
      border-radius: 12px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 16px;
      gap: 10px;
    }
    .spinner {
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid rgba(255,255,255,0.3);
      border-radius: 50%;
      border-top-color: #fff;
      animation: spin 1s ease-in-out infinite;
    }
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    #cameraContainer {
      position: relative;
      width: 100%;
      height: 300px;
      border-radius: 12px;
      overflow: hidden;
    }
    #switchCamera {
      position: absolute;
      bottom: 10px;
      right: 10px;
      background: rgba(0,0,0,0.7);
      color: white;
      border: none;
      border-radius: 50%;
      width: 44px;
      height: 44px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      z-index: 2;
      backdrop-filter: blur(10px);
    }
    .loading {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 3px solid rgba(255,255,255,0.3);
      border-radius: 50%;
      border-top-color: #fff;
      animation: spin 1s ease-in-out infinite;
    }
    .skeleton {
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200% 100%;
      animation: loading 1.5s infinite;
      border-radius: 4px;
    }
    @keyframes loading {
      0% { background-position: 200% 0; }
      100% { background-position: -200% 0; }
    }
    .material-symbols-rounded { 
      font-variation-settings: 'FILL' 1, 'GRAD' 200, 'opsz' 24;
    }
    .hint {
      font-size: 12px;
      opacity: 0.8;
      margin-top: 8px;
      line-height: 1.4;
    }
    #cameraContainer video {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    #cameraContainer img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  </style>
</head>
<body>
  <header>
    <div class="brand">
      <span class="material-symbols-rounded" style="color:#FF8F00">workspace_premium</span>
      <div>
        <div style="font-weight:800">Presensi Karyawan</div>
        <div id="serverTime" style="font-size:12px; opacity:.8">Memuat waktu...</div>
      </div>
    </div>
    <div class="icons">
      <button id="profileBtn" class="icon-btn" title="Profil">
        <span class="material-symbols-rounded">account_circle</span>
      </button>
    </div>
  </header>

  <div class="container">
    <div class="grid">
      <section class="card">
        <h3 style="margin:0 0 8px">Ambil presensi</h3>
        <div class="row" style="justify-content:space-between; margin-bottom: 16px;">
          <span id="statusChip" class="status s-good">
            <span class="material-symbols-rounded">check_circle</span>
            <span id="statusText">Memuat status...</span>
          </span>
          <span class="chip">
            <span class="material-symbols-rounded">pin_drop</span>
            <span id="locText">Mengambil lokasi...</span>
          </span>
        </div>
        
        <div id="cameraContainer">
          <div class="camera-placeholder">
            <span class="material-symbols-rounded" style="font-size:48px">photo_camera</span>
            <div>Menyiapkan kamera...</div>
          </div>
        </div>
        <button id="switchCamera" style="display:none">
          <span class="material-symbols-rounded">switch_video</span>
        </button>

        <div class="camera-controls" style="margin-top: 16px;">
          <div class="input" style="margin-bottom: 12px;">
            <span class="material-symbols-rounded">assignment</span>
            <select id="jenis">
              <option value="berangkat">Berangkat</option>
              <option value="pulang">Pulang</option>
              <option value="izin">Izin</option>
            </select>
          </div>
          <div class="row">
            <button id="snapBtn" class="btn" disabled>
              <span class="material-symbols-rounded">photo_camera</span> 
              <span id="snapText">Menyiapkan...</span>
            </button>
            <button id="uploadBtn" class="btn" disabled>
              <span class="material-symbols-rounded">cloud_upload</span> 
              <span id="uploadText">Upload</span>
            </button>
          </div>
        </div>
        
        <div class="hint">
          <strong>Presensi Shift Pagi:</strong> Berangkat 05.30-06.00, Pulang 10.00-11.00<br>
          <strong>Presensi Shift Sore:</strong> Berangkat 14.00-14.30, Pulang 17.30-18.30<br>
          <strong>Izin:</strong> Dapat dilakukan kapan saja (00.00-23.59)<br>
          <em>Minta izin tidak berangkat wajib chat WhatsApp 081548262229 (Karomi)</em>
        </div>
      </section>
    </div>
  </div>

  <!-- Dialog profil -->
  <dialog id="profileDlg">
    <div class="dlg-head">
      <div class="row">
        <span class="material-symbols-rounded">account_circle</span>
        <b>Profil Karyawan</b>
      </div>
      <button class="icon-btn" id="closeProfileDlg">
        <span class="material-symbols-rounded">close</span>
      </button>
    </div>
    <div class="dlg-body">
      <div class="row" style="align-items:flex-end; margin-bottom: 16px;">
        <img id="pfp" src="https://api.dicebear.com/7.x/initials/svg?seed=Karyawan&backgroundColor=ffb300,ffd54f&radius=20" 
             alt="Foto profil" style="width:80px;height:80px;border-radius:16px; background:#eee" />
        <div class="input" style="flex:1;">
          <span class="material-symbols-rounded">photo_camera</span>
          <input type="file" id="pfpFile" accept="image/*" style="padding: 8px 0;" />
        </div>
      </div>
      
      <div class="row" style="margin-bottom: 12px;">
        <div class="input" style="flex:1">
          <span class="material-symbols-rounded">badge</span>
          <input id="nama" placeholder="Nama lengkap" />
        </div>
      </div>
      
      <div class="row" style="margin-bottom: 12px;">
        <div class="input" style="flex:1">
          <span class="material-symbols-rounded">home</span>
          <input id="alamat" placeholder="Alamat" />
        </div>
      </div>
      
      <div class="row" style="margin-bottom: 20px;">
        <div class="input" style="flex:1">
          <span class="material-symbols-rounded">schedule</span>
          <select id="shift">
            <option value="pagi">Shift Pagi</option>
            <option value="sore">Shift Sore</option>
          </select>
        </div>
      </div>
      
      <div class="row" style="justify-content:space-between;">
        <button id="saveProfileBtn" class="btn" style="flex:1; margin-right: 8px;">
          <span class="material-symbols-rounded">save</span> Simpan Profil
        </button>
        <button id="logoutBtn" class="btn" style="background:#555; flex:1; margin-left: 8px;">
          <span class="material-symbols-rounded">logout</span> Keluar
        </button>
      </div>
    </div>
  </dialog>

  <div class="toast" id="toast"></div>

  <script src="https://www.gstatic.com/firebasejs/10.12.2/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/10.12.2/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore-compat.js"></script>
  
  <script>
    // ==================== KONFIGURASI ====================
    const firebaseConfig = {
      apiKey: "AIzaSyApYdiUlLMb9ihBkLnCjDpLJHqYFRFS3Fw",
      authDomain: "fupa-snack.firebaseapp.com",
      projectId: "fupa-snack",
      storageBucket: "fupa-snack.firebasestorage.app",
      messagingSenderId: "972524876738",
      appId: "1:972524876738:web:dd0d57dd8bf2d8a8dd9c5b"
    };

    const cloudinaryConfig = {
      cloudName: 'da7idhh4f',
      uploadPreset: 'FupaSnack'
    };

    // ==================== INISIALISASI FIREBASE ====================
    firebase.initializeApp(firebaseConfig);
    const auth = firebase.auth();
    const db = firebase.firestore();

    // ==================== VARIABEL GLOBAL ====================
    let currentUser = null;
    let userData = {};
    let currentStream = null;
    let capturedPhoto = null;
    let currentLocation = null;
    let usingFrontCamera = true;

    // ==================== FUNGSI UTILITAS ====================
    function $(selector) {
      return document.querySelector(selector);
    }

    function showToast(message, type = 'info') {
      const toast = $('#toast');
      const colors = {
        success: '#2e7d32',
        error: '#c62828',
        warning: '#f9a825',
        info: '#111'
      };
      
      toast.style.backgroundColor = colors[type] || colors.info;
      toast.textContent = message;
      toast.style.display = "block";
      
      setTimeout(() => {
        toast.style.display = "none";
      }, 3000);
    }

    function updateButton(buttonId, enabled, text = null) {
      const button = $(buttonId);
      if (button) {
        button.disabled = !enabled;
        if (text) {
          const textSpan = button.querySelector('span:last-child');
          if (textSpan) textSpan.textContent = text;
        }
      }
    }

    function showLoading(buttonId, text = 'Memuat...') {
      const button = $(buttonId);
      if (button) {
        button.innerHTML = `<span class="spinner"></span> ${text}`;
        button.disabled = true;
      }
    }

    function hideLoading(buttonId, originalText) {
      const button = $(buttonId);
      if (button) {
        button.innerHTML = originalText;
        button.disabled = false;
      }
    }

    // ==================== FUNGSI WAKTU ====================
    function updateServerTime() {
      const now = new Date();
      const options = { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        timeZone: 'Asia/Jakarta'
      };
      
      const timeElement = $('#serverTime');
      if (timeElement) {
        timeElement.textContent = now.toLocaleDateString('id-ID', options);
      }
    }

    // ==================== FUNGSI KAMERA ====================
    async function startCamera() {
      try {
        // Hentikan stream sebelumnya
        if (currentStream) {
          currentStream.getTracks().forEach(track => track.stop());
        }

        const stream = await navigator.mediaDevices.getUserMedia({
          video: { 
            facingMode: usingFrontCamera ? 'user' : 'environment',
            width: { ideal: 1280 }, 
            height: { ideal: 720 } 
          },
          audio: false
        });

        currentStream = stream;
        const cameraContainer = $('#cameraContainer');
        
        // Bersihkan container
        cameraContainer.innerHTML = '';
        
        // Buat elemen video
        const video = document.createElement('video');
        video.srcObject = stream;
        video.autoplay = true;
        video.playsInline = true;
        video.style.width = '100%';
        video.style.height = '100%';
        video.style.objectFit = 'cover';
        
        cameraContainer.appendChild(video);
        $('#switchCamera').style.display = 'block';
        
        updateButton('#snapBtn', true, 'Ambil Selfie');
        
        return video;
      } catch (error) {
        console.error('Error accessing camera:', error);
        $('#cameraContainer').innerHTML = `
          <div class="camera-placeholder" style="color:#ff6b6b;">
            <span class="material-symbols-rounded" style="font-size:48px;">no_photography</span>
            <div>Kamera tidak dapat diakses</div>
          </div>
        `;
        updateButton('#snapBtn', false, 'Kamera Error');
        return null;
      }
    }

    async function takePicture() {
      try {
        const video = $('#cameraContainer video');
        if (!video) {
          showToast('Kamera tidak aktif', 'error');
          return;
        }

        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        context.drawImage(video, 0, 0, canvas.width, canvas.height);

        canvas.toBlob((blob) => {
          capturedPhoto = blob;
          
          // Tampilkan preview
          const cameraContainer = $('#cameraContainer');
          const img = document.createElement('img');
          img.src = URL.createObjectURL(blob);
          img.style.width = '100%';
          img.style.height = '100%';
          img.style.objectFit = 'cover';
          
          cameraContainer.innerHTML = '';
          cameraContainer.appendChild(img);
          $('#switchCamera').style.display = 'none';
          
          // Aktifkan upload button
          updatePresenceStatus();
          
          showToast('Foto berhasil diambil', 'success');
        }, 'image/jpeg', 0.9);

      } catch (error) {
        console.error('Error taking picture:', error);
        showToast('Gagal mengambil foto', 'error');
      }
    }

    async function switchCamera() {
      try {
        usingFrontCamera = !usingFrontCamera;
        await startCamera();
        showToast('Kamera diganti', 'success');
      } catch (error) {
        console.error('Error switching camera:', error);
        showToast('Gagal mengganti kamera', 'error');
      }
    }

    // ==================== FUNGSI LOKASI ====================
    async function getCurrentLocation() {
      return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
          reject(new Error('Geolocation tidak didukung'));
          return;
        }

        navigator.geolocation.getCurrentPosition(
          (position) => {
            const coords = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            currentLocation = coords;
            $('#locText').textContent = `${coords.lat.toFixed(4)}, ${coords.lng.toFixed(4)}`;
            resolve(coords);
          },
          (error) => {
            console.error('Error getting location:', error);
            $('#locText').textContent = 'Lokasi gagal diambil';
            reject(error);
          },
          { enableHighAccuracy: true, timeout: 10000 }
        );
      });
    }

    // ==================== FUNGSI PRESENSI ====================
    function getPresenceStatus(now, shift, jenis) {
      const day = now.getDay();
      const hour = now.getHours();
      const minute = now.getMinutes();
      const totalMinutes = hour * 60 + minute;
      
      // Libur Minggu
      if (day === 0) return { status: 'Libur', canPresence: jenis === 'izin' };
      
      // Izin bisa kapan saja
      if (jenis === 'izin') return { status: 'Izin', canPresence: true };
      
      // Shift pagi
      if (shift === 'pagi') {
        if (jenis === 'berangkat') {
          if (totalMinutes >= 330 && totalMinutes <= 360) return { status: 'Tepat Waktu', canPresence: true };
          if (totalMinutes > 360 && totalMinutes <= 380) return { status: 'Terlambat', canPresence: true };
        } else if (jenis === 'pulang') {
          if (totalMinutes >= 600 && totalMinutes <= 660) return { status: 'Tepat Waktu', canPresence: true };
          if (totalMinutes > 660 && totalMinutes <= 680) return { status: 'Terlambat', canPresence: true };
        }
      }
      
      // Shift sore
      if (shift === 'sore') {
        if (jenis === 'berangkat') {
          if (totalMinutes >= 840 && totalMinutes <= 870) return { status: 'Tepat Waktu', canPresence: true };
          if (totalMinutes > 870 && totalMinutes <= 890) return { status: 'Terlambat', canPresence: true };
        } else if (jenis === 'pulang') {
          if (totalMinutes >= 1050 && totalMinutes <= 1110) return { status: 'Tepat Waktu', canPresence: true };
          if (totalMinutes > 1110 && totalMinutes <= 1130) return { status: 'Terlambat', canPresence: true };
        }
      }
      
      return { status: 'Di luar sesi presensi', canPresence: jenis === 'izin' };
    }

    function updatePresenceStatus() {
      if (!userData.shift) {
        $('#statusText').textContent = 'Data shift belum diatur';
        $('#statusChip').className = 'status s-bad';
        return;
      }
      
      const now = new Date();
      const jenis = $('#jenis').value;
      const statusInfo = getPresenceStatus(now, userData.shift, jenis);
      
      $('#statusText').textContent = statusInfo.status;
      
      const statusChip = $('#statusChip');
      statusChip.className = 'status ';
      
      if (statusInfo.status.includes('Tepat Waktu') || statusInfo.status.includes('Izin')) {
        statusChip.classList.add('s-good');
      } else if (statusInfo.status.includes('Terlambat')) {
        statusChip.classList.add('s-warn');
      } else {
        statusChip.classList.add('s-bad');
      }
      
      // Update upload button
      const canUpload = statusInfo.canPresence && capturedPhoto && currentLocation;
      updateButton('#uploadBtn', canUpload);
    }

    // ==================== FUNGSI CLOUDINARY ====================
    async function uploadToCloudinary(blob) {
      const formData = new FormData();
      formData.append('file', blob);
      formData.append('upload_preset', cloudinaryConfig.uploadPreset);
      formData.append('cloud_name', cloudinaryConfig.cloudName);
      
      const response = await fetch(
        `https://api.cloudinary.com/v1_1/${cloudinaryConfig.cloudName}/upload`,
        { method: 'POST', body: formData }
      );
      
      if (!response.ok) throw new Error('Upload gagal');
      const data = await response.json();
      return data.secure_url;
    }

    function compressImage(blob) {
      return new Promise((resolve) => {
        const img = new Image();
        const url = URL.createObjectURL(blob);
        
        img.onload = function() {
          const canvas = document.createElement('canvas');
          const ctx = canvas.getContext('2d');
          
          let width = img.width;
          let height = img.height;
          const maxDimension = 800;
          
          if (width > maxDimension || height > maxDimension) {
            if (width > height) {
              height = (height * maxDimension) / width;
              width = maxDimension;
            } else {
              width = (width * maxDimension) / height;
              height = maxDimension;
            }
          }
          
          canvas.width = width;
          canvas.height = height;
          ctx.drawImage(img, 0, 0, width, height);
          
          canvas.toBlob((compressedBlob) => {
            URL.revokeObjectURL(url);
            resolve(compressedBlob);
          }, 'image/jpeg', 0.7);
        };
        
        img.src = url;
      });
    }

    // ==================== FUNGSI FIRESTORE ====================
    async function loadUserData() {
      try {
        const userDoc = await db.collection('users').doc(currentUser.uid).get();
        
        if (userDoc.exists) {
          userData = userDoc.data();
          
          // Update form fields
          if (userData.nama) $('#nama').value = userData.nama;
          if (userData.alamat) $('#alamat').value = userData.alamat;
          if (userData.shift) $('#shift').value = userData.shift;
          if (userData.fotoURL) $('#pfp').src = userData.fotoURL;
          
          console.log('User data loaded:', userData);
        } else {
          // Create new user document
          await db.collection('users').doc(currentUser.uid).set({
            email: currentUser.email,
            nama: currentUser.email.split('@')[0],
            alamat: '',
            shift: 'pagi',
            role: 'karyawan',
            createdAt: firebase.firestore.FieldValue.serverTimestamp()
          });
          
          // Reload data
          await loadUserData();
        }
      } catch (error) {
        console.error('Error loading user data:', error);
        showToast('Gagal memuat data profil', 'error');
      }
    }

    async function saveUserData() {
      try {
        const nama = $('#nama').value.trim();
        const alamat = $('#alamat').value.trim();
        const shift = $('#shift').value;
        
        if (!nama) {
          showToast('Nama tidak boleh kosong', 'error');
          return;
        }
        
        showLoading('#saveProfileBtn', 'Menyimpan...');
        
        await db.collection('users').doc(currentUser.uid).update({
          nama: nama,
          alamat: alamat,
          shift: shift,
          updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        
        userData.nama = nama;
        userData.alamat = alamat;
        userData.shift = shift;
        
        $('#profileDlg').close();
        showToast('Profil berhasil disimpan', 'success');
        updatePresenceStatus();
        
      } catch (error) {
        console.error('Error saving user data:', error);
        showToast('Gagal menyimpan profil', 'error');
      } finally {
        hideLoading('#saveProfileBtn', '<span class="material-symbols-rounded">save</span> Simpan Profil');
      }
    }

    async function uploadPresence() {
      if (!capturedPhoto) {
        showToast('Ambil foto terlebih dahulu', 'error');
        return;
      }
      
      try {
        showLoading('#uploadBtn', 'Mengupload...');
        
        // Compress image
        const compressedImage = await compressImage(capturedPhoto);
        
        // Upload to Cloudinary
        const photoURL = await uploadToCloudinary(compressedImage);
        
        // Get presence status
        const now = new Date();
        const jenis = $('#jenis').value;
        const statusInfo = getPresenceStatus(now, userData.shift, jenis);
        
        // Save to Firestore
        await db.collection('presensi').add({
          uid: currentUser.uid,
          waktu: firebase.firestore.FieldValue.serverTimestamp(),
          jenis: jenis,
          status: statusInfo.status,
          koordinat: new firebase.firestore.GeoPoint(currentLocation.lat, currentLocation.lng),
          fotoURL: photoURL,
          shift: userData.shift,
          nama: userData.nama || currentUser.email,
          createdAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        
        // Reset state
        capturedPhoto = null;
        updateButton('#uploadBtn', false);
        
        // Restart camera
        await startCamera();
        
        showToast('Presensi berhasil dicatat!', 'success');
        
      } catch (error) {
        console.error('Error uploading presence:', error);
        showToast('Gagal mengupload presensi', 'error');
      } finally {
        hideLoading('#uploadBtn', '<span class="material-symbols-rounded">cloud_upload</span> Upload');
      }
    }

    async function uploadProfilePicture(file) {
      try {
        if (!file) return;
        
        showLoading('#saveProfileBtn', 'Mengupload foto...');
        
        // Compress image
        const compressedImage = await compressImage(file);
        
        // Upload to Cloudinary
        const photoURL = await uploadToCloudinary(compressedImage);
        
        // Save to Firestore
        await db.collection('users').doc(currentUser.uid).update({
          fotoURL: photoURL
        });
        
        // Update UI
        userData.fotoURL = photoURL;
        $('#pfp').src = photoURL;
        
        showToast('Foto profil berhasil diupdate', 'success');
        
      } catch (error) {
        console.error('Error uploading profile picture:', error);
        showToast('Gagal mengupload foto profil', 'error');
      } finally {
        hideLoading('#saveProfileBtn', '<span class="material-symbols-rounded">save</span> Simpan Profil');
      }
    }

    // ==================== EVENT LISTENERS ====================
    function setupEventListeners() {
      console.log('Setting up event listeners...');
      
      // Snap button
      $('#snapBtn').addEventListener('click', takePicture);
      
      // Upload button
      $('#uploadBtn').addEventListener('click', uploadPresence);
      
      // Jenis select
      $('#jenis').addEventListener('change', updatePresenceStatus);
      
      // Profile button
      $('#profileBtn').addEventListener('click', () => {
        $('#profileDlg').showModal();
      });
      
      // Close profile dialog
      $('#closeProfileDlg').addEventListener('click', () => {
        $('#profileDlg').close();
      });
      
      // Save profile
      $('#saveProfileBtn').addEventListener('click', saveUserData);
      
      // Logout
      $('#logoutBtn').addEventListener('click', () => {
        if (currentStream) {
          currentStream.getTracks().forEach(track => track.stop());
        }
        auth.signOut();
      });
      
      // Switch camera
      $('#switchCamera').addEventListener('click', switchCamera);
      
      // Profile picture upload
      $('#pfpFile').addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
          uploadProfilePicture(file);
        }
      });
      
      console.log('Event listeners setup completed');
    }

    // ==================== INITIALIZATION ====================
    async function initializeApp() {
      try {
        console.log('Initializing app...');
        
        // Setup event listeners first
        setupEventListeners();
        
        // Start time updates
        updateServerTime();
        setInterval(updateServerTime, 1000);
        
        // Load user data
        await loadUserData();
        
        // Get location
        try {
          await getCurrentLocation();
        } catch (error) {
          console.warn('Location error:', error);
        }
        
        // Start camera
        await startCamera();
        
        // Update presence status
        updatePresenceStatus();
        setInterval(updatePresenceStatus, 30000);
        
        console.log('App initialized successfully');
        
      } catch (error) {
        console.error('Error initializing app:', error);
        showToast('Gagal memuat aplikasi', 'error');
      }
    }

    // ==================== AUTH STATE LISTENER ====================
    auth.onAuthStateChanged(async (user) => {
      if (user) {
        console.log('User signed in:', user.email);
        currentUser = user;
        
        // Verify user role
        try {
          const userDoc = await db.collection('users').doc(user.uid).get();
          const role = userDoc.exists ? userDoc.data().role : 'karyawan';
          
          if (role !== 'karyawan') {
            showToast('Akses ditolak. Hanya untuk karyawan.', 'error');
            setTimeout(() => window.location.href = 'index.html', 2000);
            return;
          }
          
          await initializeApp();
          
        } catch (error) {
          console.error('Error verifying role:', error);
          showToast('Error memverifikasi akses', 'error');
        }
      } else {
        console.log('No user, redirecting to login');
        window.location.href = 'index.html';
      }
    });

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      if (currentStream) {
        currentStream.getTracks().forEach(track => track.stop());
      }
    });

  </script>
</body>
</html>